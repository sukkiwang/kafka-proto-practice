// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pnr.proto

#include "pnr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pnr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Date_pnr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pnr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PNR_Rloc_pnr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pnr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Passenger_pnr_2eproto;
namespace amapnr {
class DateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Date> _instance;
} _Date_default_instance_;
class PassengerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Passenger> _instance;
} _Passenger_default_instance_;
class PNR_RlocDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PNR_Rloc> _instance;
} _PNR_Rloc_default_instance_;
class PNRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PNR> _instance;
} _PNR_default_instance_;
}  // namespace amapnr
static void InitDefaultsscc_info_Date_pnr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amapnr::_Date_default_instance_;
    new (ptr) ::amapnr::Date();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amapnr::Date::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Date_pnr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Date_pnr_2eproto}, {}};

static void InitDefaultsscc_info_PNR_pnr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amapnr::_PNR_default_instance_;
    new (ptr) ::amapnr::PNR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amapnr::PNR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PNR_pnr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PNR_pnr_2eproto}, {
      &scc_info_PNR_Rloc_pnr_2eproto.base,
      &scc_info_Date_pnr_2eproto.base,
      &scc_info_Passenger_pnr_2eproto.base,}};

static void InitDefaultsscc_info_PNR_Rloc_pnr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amapnr::_PNR_Rloc_default_instance_;
    new (ptr) ::amapnr::PNR_Rloc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amapnr::PNR_Rloc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PNR_Rloc_pnr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PNR_Rloc_pnr_2eproto}, {}};

static void InitDefaultsscc_info_Passenger_pnr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::amapnr::_Passenger_default_instance_;
    new (ptr) ::amapnr::Passenger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::amapnr::Passenger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Passenger_pnr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Passenger_pnr_2eproto}, {
      &scc_info_Date_pnr_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pnr_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pnr_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pnr_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pnr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amapnr::Date, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amapnr::Date, year_),
  PROTOBUF_FIELD_OFFSET(::amapnr::Date, month_),
  PROTOBUF_FIELD_OFFSET(::amapnr::Date, day_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amapnr::Passenger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amapnr::Passenger, surname_),
  PROTOBUF_FIELD_OFFSET(::amapnr::Passenger, firstname_),
  PROTOBUF_FIELD_OFFSET(::amapnr::Passenger, dateofbirth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amapnr::PNR_Rloc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amapnr::PNR_Rloc, rloc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::amapnr::PNR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::amapnr::PNR, rloc_),
  PROTOBUF_FIELD_OFFSET(::amapnr::PNR, flightnum_),
  PROTOBUF_FIELD_OFFSET(::amapnr::PNR, departuredate_),
  PROTOBUF_FIELD_OFFSET(::amapnr::PNR, arrivaldate_),
  PROTOBUF_FIELD_OFFSET(::amapnr::PNR, pax_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::amapnr::Date)},
  { 8, -1, sizeof(::amapnr::Passenger)},
  { 16, -1, sizeof(::amapnr::PNR_Rloc)},
  { 22, -1, sizeof(::amapnr::PNR)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amapnr::_Date_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amapnr::_Passenger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amapnr::_PNR_Rloc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::amapnr::_PNR_default_instance_),
};

const char descriptor_table_protodef_pnr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tpnr.proto\022\006amapnr\"0\n\004Date\022\014\n\004year\030\001 \001("
  "\005\022\r\n\005month\030\002 \001(\005\022\013\n\003day\030\003 \001(\005\"R\n\tPasseng"
  "er\022\017\n\007surname\030\001 \001(\t\022\021\n\tfirstname\030\002 \001(\t\022!"
  "\n\013dateofbirth\030\003 \001(\0132\014.amapnr.Date\"\266\001\n\003PN"
  "R\022\036\n\004rloc\030\001 \001(\0132\020.amapnr.PNR.Rloc\022\021\n\tfli"
  "ghtNum\030\002 \001(\t\022#\n\rdepartureDate\030\003 \001(\0132\014.am"
  "apnr.Date\022!\n\013arrivalDate\030\004 \001(\0132\014.amapnr."
  "Date\022\036\n\003pax\030\005 \001(\0132\021.amapnr.Passenger\032\024\n\004"
  "Rloc\022\014\n\004rloc\030\001 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pnr_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pnr_2eproto_sccs[4] = {
  &scc_info_Date_pnr_2eproto.base,
  &scc_info_PNR_pnr_2eproto.base,
  &scc_info_PNR_Rloc_pnr_2eproto.base,
  &scc_info_Passenger_pnr_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pnr_2eproto_once;
static bool descriptor_table_pnr_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pnr_2eproto = {
  &descriptor_table_pnr_2eproto_initialized, descriptor_table_protodef_pnr_2eproto, "pnr.proto", 346,
  &descriptor_table_pnr_2eproto_once, descriptor_table_pnr_2eproto_sccs, descriptor_table_pnr_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_pnr_2eproto::offsets,
  file_level_metadata_pnr_2eproto, 4, file_level_enum_descriptors_pnr_2eproto, file_level_service_descriptors_pnr_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pnr_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pnr_2eproto), true);
namespace amapnr {

// ===================================================================

void Date::InitAsDefaultInstance() {
}
class Date::_Internal {
 public:
};

Date::Date()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amapnr.Date)
}
Date::Date(const Date& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&day_) -
    reinterpret_cast<char*>(&year_)) + sizeof(day_));
  // @@protoc_insertion_point(copy_constructor:amapnr.Date)
}

void Date::SharedCtor() {
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&year_)) + sizeof(day_));
}

Date::~Date() {
  // @@protoc_insertion_point(destructor:amapnr.Date)
  SharedDtor();
}

void Date::SharedDtor() {
}

void Date::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Date& Date::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Date_pnr_2eproto.base);
  return *internal_default_instance();
}


void Date::Clear() {
// @@protoc_insertion_point(message_clear_start:amapnr.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&year_)) + sizeof(day_));
  _internal_metadata_.Clear();
}

const char* Date::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Date::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amapnr.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // int32 month = 2;
  if (this->month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_month(), target);
  }

  // int32 day = 3;
  if (this->day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amapnr.Date)
  return target;
}

size_t Date::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amapnr.Date)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  // int32 month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  // int32 day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Date::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amapnr.Date)
  GOOGLE_DCHECK_NE(&from, this);
  const Date* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Date>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amapnr.Date)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amapnr.Date)
    MergeFrom(*source);
  }
}

void Date::MergeFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amapnr.Date)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from.month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
}

void Date::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amapnr.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Date::CopyFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amapnr.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date::IsInitialized() const {
  return true;
}

void Date::InternalSwap(Date* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(year_, other->year_);
  swap(month_, other->month_);
  swap(day_, other->day_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Date::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Passenger::InitAsDefaultInstance() {
  ::amapnr::_Passenger_default_instance_._instance.get_mutable()->dateofbirth_ = const_cast< ::amapnr::Date*>(
      ::amapnr::Date::internal_default_instance());
}
class Passenger::_Internal {
 public:
  static const ::amapnr::Date& dateofbirth(const Passenger* msg);
};

const ::amapnr::Date&
Passenger::_Internal::dateofbirth(const Passenger* msg) {
  return *msg->dateofbirth_;
}
Passenger::Passenger()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amapnr.Passenger)
}
Passenger::Passenger(const Passenger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  surname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_surname().empty()) {
    surname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.surname_);
  }
  firstname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_firstname().empty()) {
    firstname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.firstname_);
  }
  if (from._internal_has_dateofbirth()) {
    dateofbirth_ = new ::amapnr::Date(*from.dateofbirth_);
  } else {
    dateofbirth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:amapnr.Passenger)
}

void Passenger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Passenger_pnr_2eproto.base);
  surname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firstname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dateofbirth_ = nullptr;
}

Passenger::~Passenger() {
  // @@protoc_insertion_point(destructor:amapnr.Passenger)
  SharedDtor();
}

void Passenger::SharedDtor() {
  surname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firstname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dateofbirth_;
}

void Passenger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Passenger& Passenger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Passenger_pnr_2eproto.base);
  return *internal_default_instance();
}


void Passenger::Clear() {
// @@protoc_insertion_point(message_clear_start:amapnr.Passenger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  surname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firstname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && dateofbirth_ != nullptr) {
    delete dateofbirth_;
  }
  dateofbirth_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Passenger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string surname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_surname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amapnr.Passenger.surname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string firstname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_firstname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amapnr.Passenger.firstname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .amapnr.Date dateofbirth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dateofbirth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Passenger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amapnr.Passenger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string surname = 1;
  if (this->surname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_surname().data(), static_cast<int>(this->_internal_surname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amapnr.Passenger.surname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_surname(), target);
  }

  // string firstname = 2;
  if (this->firstname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firstname().data(), static_cast<int>(this->_internal_firstname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amapnr.Passenger.firstname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_firstname(), target);
  }

  // .amapnr.Date dateofbirth = 3;
  if (this->has_dateofbirth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dateofbirth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amapnr.Passenger)
  return target;
}

size_t Passenger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amapnr.Passenger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string surname = 1;
  if (this->surname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_surname());
  }

  // string firstname = 2;
  if (this->firstname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firstname());
  }

  // .amapnr.Date dateofbirth = 3;
  if (this->has_dateofbirth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dateofbirth_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Passenger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amapnr.Passenger)
  GOOGLE_DCHECK_NE(&from, this);
  const Passenger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Passenger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amapnr.Passenger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amapnr.Passenger)
    MergeFrom(*source);
  }
}

void Passenger::MergeFrom(const Passenger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amapnr.Passenger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.surname().size() > 0) {

    surname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.surname_);
  }
  if (from.firstname().size() > 0) {

    firstname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.firstname_);
  }
  if (from.has_dateofbirth()) {
    _internal_mutable_dateofbirth()->::amapnr::Date::MergeFrom(from._internal_dateofbirth());
  }
}

void Passenger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amapnr.Passenger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Passenger::CopyFrom(const Passenger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amapnr.Passenger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Passenger::IsInitialized() const {
  return true;
}

void Passenger::InternalSwap(Passenger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  surname_.Swap(&other->surname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  firstname_.Swap(&other->firstname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dateofbirth_, other->dateofbirth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Passenger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PNR_Rloc::InitAsDefaultInstance() {
}
class PNR_Rloc::_Internal {
 public:
};

PNR_Rloc::PNR_Rloc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amapnr.PNR.Rloc)
}
PNR_Rloc::PNR_Rloc(const PNR_Rloc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rloc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rloc().empty()) {
    rloc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rloc_);
  }
  // @@protoc_insertion_point(copy_constructor:amapnr.PNR.Rloc)
}

void PNR_Rloc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PNR_Rloc_pnr_2eproto.base);
  rloc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PNR_Rloc::~PNR_Rloc() {
  // @@protoc_insertion_point(destructor:amapnr.PNR.Rloc)
  SharedDtor();
}

void PNR_Rloc::SharedDtor() {
  rloc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PNR_Rloc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PNR_Rloc& PNR_Rloc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PNR_Rloc_pnr_2eproto.base);
  return *internal_default_instance();
}


void PNR_Rloc::Clear() {
// @@protoc_insertion_point(message_clear_start:amapnr.PNR.Rloc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rloc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PNR_Rloc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rloc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rloc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amapnr.PNR.Rloc.rloc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PNR_Rloc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amapnr.PNR.Rloc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rloc = 1;
  if (this->rloc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rloc().data(), static_cast<int>(this->_internal_rloc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amapnr.PNR.Rloc.rloc");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rloc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amapnr.PNR.Rloc)
  return target;
}

size_t PNR_Rloc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amapnr.PNR.Rloc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rloc = 1;
  if (this->rloc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rloc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PNR_Rloc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amapnr.PNR.Rloc)
  GOOGLE_DCHECK_NE(&from, this);
  const PNR_Rloc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PNR_Rloc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amapnr.PNR.Rloc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amapnr.PNR.Rloc)
    MergeFrom(*source);
  }
}

void PNR_Rloc::MergeFrom(const PNR_Rloc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amapnr.PNR.Rloc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rloc().size() > 0) {

    rloc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rloc_);
  }
}

void PNR_Rloc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amapnr.PNR.Rloc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNR_Rloc::CopyFrom(const PNR_Rloc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amapnr.PNR.Rloc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNR_Rloc::IsInitialized() const {
  return true;
}

void PNR_Rloc::InternalSwap(PNR_Rloc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rloc_.Swap(&other->rloc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PNR_Rloc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PNR::InitAsDefaultInstance() {
  ::amapnr::_PNR_default_instance_._instance.get_mutable()->rloc_ = const_cast< ::amapnr::PNR_Rloc*>(
      ::amapnr::PNR_Rloc::internal_default_instance());
  ::amapnr::_PNR_default_instance_._instance.get_mutable()->departuredate_ = const_cast< ::amapnr::Date*>(
      ::amapnr::Date::internal_default_instance());
  ::amapnr::_PNR_default_instance_._instance.get_mutable()->arrivaldate_ = const_cast< ::amapnr::Date*>(
      ::amapnr::Date::internal_default_instance());
  ::amapnr::_PNR_default_instance_._instance.get_mutable()->pax_ = const_cast< ::amapnr::Passenger*>(
      ::amapnr::Passenger::internal_default_instance());
}
class PNR::_Internal {
 public:
  static const ::amapnr::PNR_Rloc& rloc(const PNR* msg);
  static const ::amapnr::Date& departuredate(const PNR* msg);
  static const ::amapnr::Date& arrivaldate(const PNR* msg);
  static const ::amapnr::Passenger& pax(const PNR* msg);
};

const ::amapnr::PNR_Rloc&
PNR::_Internal::rloc(const PNR* msg) {
  return *msg->rloc_;
}
const ::amapnr::Date&
PNR::_Internal::departuredate(const PNR* msg) {
  return *msg->departuredate_;
}
const ::amapnr::Date&
PNR::_Internal::arrivaldate(const PNR* msg) {
  return *msg->arrivaldate_;
}
const ::amapnr::Passenger&
PNR::_Internal::pax(const PNR* msg) {
  return *msg->pax_;
}
PNR::PNR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:amapnr.PNR)
}
PNR::PNR(const PNR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flightnum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flightnum().empty()) {
    flightnum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.flightnum_);
  }
  if (from._internal_has_rloc()) {
    rloc_ = new ::amapnr::PNR_Rloc(*from.rloc_);
  } else {
    rloc_ = nullptr;
  }
  if (from._internal_has_departuredate()) {
    departuredate_ = new ::amapnr::Date(*from.departuredate_);
  } else {
    departuredate_ = nullptr;
  }
  if (from._internal_has_arrivaldate()) {
    arrivaldate_ = new ::amapnr::Date(*from.arrivaldate_);
  } else {
    arrivaldate_ = nullptr;
  }
  if (from._internal_has_pax()) {
    pax_ = new ::amapnr::Passenger(*from.pax_);
  } else {
    pax_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:amapnr.PNR)
}

void PNR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PNR_pnr_2eproto.base);
  flightnum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rloc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pax_) -
      reinterpret_cast<char*>(&rloc_)) + sizeof(pax_));
}

PNR::~PNR() {
  // @@protoc_insertion_point(destructor:amapnr.PNR)
  SharedDtor();
}

void PNR::SharedDtor() {
  flightnum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rloc_;
  if (this != internal_default_instance()) delete departuredate_;
  if (this != internal_default_instance()) delete arrivaldate_;
  if (this != internal_default_instance()) delete pax_;
}

void PNR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PNR& PNR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PNR_pnr_2eproto.base);
  return *internal_default_instance();
}


void PNR::Clear() {
// @@protoc_insertion_point(message_clear_start:amapnr.PNR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flightnum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && rloc_ != nullptr) {
    delete rloc_;
  }
  rloc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && departuredate_ != nullptr) {
    delete departuredate_;
  }
  departuredate_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && arrivaldate_ != nullptr) {
    delete arrivaldate_;
  }
  arrivaldate_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pax_ != nullptr) {
    delete pax_;
  }
  pax_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PNR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .amapnr.PNR.Rloc rloc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string flightNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_flightnum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "amapnr.PNR.flightNum"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .amapnr.Date departureDate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_departuredate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .amapnr.Date arrivalDate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrivaldate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .amapnr.Passenger pax = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pax(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PNR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:amapnr.PNR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .amapnr.PNR.Rloc rloc = 1;
  if (this->has_rloc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rloc(this), target, stream);
  }

  // string flightNum = 2;
  if (this->flightnum().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flightnum().data(), static_cast<int>(this->_internal_flightnum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "amapnr.PNR.flightNum");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_flightnum(), target);
  }

  // .amapnr.Date departureDate = 3;
  if (this->has_departuredate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::departuredate(this), target, stream);
  }

  // .amapnr.Date arrivalDate = 4;
  if (this->has_arrivaldate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::arrivaldate(this), target, stream);
  }

  // .amapnr.Passenger pax = 5;
  if (this->has_pax()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pax(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:amapnr.PNR)
  return target;
}

size_t PNR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:amapnr.PNR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string flightNum = 2;
  if (this->flightnum().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flightnum());
  }

  // .amapnr.PNR.Rloc rloc = 1;
  if (this->has_rloc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rloc_);
  }

  // .amapnr.Date departureDate = 3;
  if (this->has_departuredate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *departuredate_);
  }

  // .amapnr.Date arrivalDate = 4;
  if (this->has_arrivaldate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arrivaldate_);
  }

  // .amapnr.Passenger pax = 5;
  if (this->has_pax()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pax_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PNR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:amapnr.PNR)
  GOOGLE_DCHECK_NE(&from, this);
  const PNR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PNR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:amapnr.PNR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:amapnr.PNR)
    MergeFrom(*source);
  }
}

void PNR::MergeFrom(const PNR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:amapnr.PNR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flightnum().size() > 0) {

    flightnum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.flightnum_);
  }
  if (from.has_rloc()) {
    _internal_mutable_rloc()->::amapnr::PNR_Rloc::MergeFrom(from._internal_rloc());
  }
  if (from.has_departuredate()) {
    _internal_mutable_departuredate()->::amapnr::Date::MergeFrom(from._internal_departuredate());
  }
  if (from.has_arrivaldate()) {
    _internal_mutable_arrivaldate()->::amapnr::Date::MergeFrom(from._internal_arrivaldate());
  }
  if (from.has_pax()) {
    _internal_mutable_pax()->::amapnr::Passenger::MergeFrom(from._internal_pax());
  }
}

void PNR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:amapnr.PNR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNR::CopyFrom(const PNR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:amapnr.PNR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNR::IsInitialized() const {
  return true;
}

void PNR::InternalSwap(PNR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  flightnum_.Swap(&other->flightnum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rloc_, other->rloc_);
  swap(departuredate_, other->departuredate_);
  swap(arrivaldate_, other->arrivaldate_);
  swap(pax_, other->pax_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PNR::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace amapnr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::amapnr::Date* Arena::CreateMaybeMessage< ::amapnr::Date >(Arena* arena) {
  return Arena::CreateInternal< ::amapnr::Date >(arena);
}
template<> PROTOBUF_NOINLINE ::amapnr::Passenger* Arena::CreateMaybeMessage< ::amapnr::Passenger >(Arena* arena) {
  return Arena::CreateInternal< ::amapnr::Passenger >(arena);
}
template<> PROTOBUF_NOINLINE ::amapnr::PNR_Rloc* Arena::CreateMaybeMessage< ::amapnr::PNR_Rloc >(Arena* arena) {
  return Arena::CreateInternal< ::amapnr::PNR_Rloc >(arena);
}
template<> PROTOBUF_NOINLINE ::amapnr::PNR* Arena::CreateMaybeMessage< ::amapnr::PNR >(Arena* arena) {
  return Arena::CreateInternal< ::amapnr::PNR >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
