// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pnr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pnr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pnr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pnr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pnr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pnr_2eproto;
namespace amapnr {
class Date;
class DateDefaultTypeInternal;
extern DateDefaultTypeInternal _Date_default_instance_;
class PNR;
class PNRDefaultTypeInternal;
extern PNRDefaultTypeInternal _PNR_default_instance_;
class PNR_Rloc;
class PNR_RlocDefaultTypeInternal;
extern PNR_RlocDefaultTypeInternal _PNR_Rloc_default_instance_;
class Passenger;
class PassengerDefaultTypeInternal;
extern PassengerDefaultTypeInternal _Passenger_default_instance_;
}  // namespace amapnr
PROTOBUF_NAMESPACE_OPEN
template<> ::amapnr::Date* Arena::CreateMaybeMessage<::amapnr::Date>(Arena*);
template<> ::amapnr::PNR* Arena::CreateMaybeMessage<::amapnr::PNR>(Arena*);
template<> ::amapnr::PNR_Rloc* Arena::CreateMaybeMessage<::amapnr::PNR_Rloc>(Arena*);
template<> ::amapnr::Passenger* Arena::CreateMaybeMessage<::amapnr::Passenger>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace amapnr {

// ===================================================================

class Date :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amapnr.Date) */ {
 public:
  Date();
  virtual ~Date();

  Date(const Date& from);
  Date(Date&& from) noexcept
    : Date() {
    *this = ::std::move(from);
  }

  inline Date& operator=(const Date& from) {
    CopyFrom(from);
    return *this;
  }
  inline Date& operator=(Date&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Date& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Date* internal_default_instance() {
    return reinterpret_cast<const Date*>(
               &_Date_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Date& a, Date& b) {
    a.Swap(&b);
  }
  inline void Swap(Date* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Date* New() const final {
    return CreateMaybeMessage<Date>(nullptr);
  }

  Date* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Date>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Date& from);
  void MergeFrom(const Date& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Date* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amapnr.Date";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pnr_2eproto);
    return ::descriptor_table_pnr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
  };
  // int32 year = 1;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 month = 2;
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 day = 3;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::int32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:amapnr.Date)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pnr_2eproto;
};
// -------------------------------------------------------------------

class Passenger :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amapnr.Passenger) */ {
 public:
  Passenger();
  virtual ~Passenger();

  Passenger(const Passenger& from);
  Passenger(Passenger&& from) noexcept
    : Passenger() {
    *this = ::std::move(from);
  }

  inline Passenger& operator=(const Passenger& from) {
    CopyFrom(from);
    return *this;
  }
  inline Passenger& operator=(Passenger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Passenger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Passenger* internal_default_instance() {
    return reinterpret_cast<const Passenger*>(
               &_Passenger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Passenger& a, Passenger& b) {
    a.Swap(&b);
  }
  inline void Swap(Passenger* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Passenger* New() const final {
    return CreateMaybeMessage<Passenger>(nullptr);
  }

  Passenger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Passenger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Passenger& from);
  void MergeFrom(const Passenger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Passenger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amapnr.Passenger";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pnr_2eproto);
    return ::descriptor_table_pnr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSurnameFieldNumber = 1,
    kFirstnameFieldNumber = 2,
    kDateofbirthFieldNumber = 3,
  };
  // string surname = 1;
  void clear_surname();
  const std::string& surname() const;
  void set_surname(const std::string& value);
  void set_surname(std::string&& value);
  void set_surname(const char* value);
  void set_surname(const char* value, size_t size);
  std::string* mutable_surname();
  std::string* release_surname();
  void set_allocated_surname(std::string* surname);
  private:
  const std::string& _internal_surname() const;
  void _internal_set_surname(const std::string& value);
  std::string* _internal_mutable_surname();
  public:

  // string firstname = 2;
  void clear_firstname();
  const std::string& firstname() const;
  void set_firstname(const std::string& value);
  void set_firstname(std::string&& value);
  void set_firstname(const char* value);
  void set_firstname(const char* value, size_t size);
  std::string* mutable_firstname();
  std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // .amapnr.Date dateofbirth = 3;
  bool has_dateofbirth() const;
  private:
  bool _internal_has_dateofbirth() const;
  public:
  void clear_dateofbirth();
  const ::amapnr::Date& dateofbirth() const;
  ::amapnr::Date* release_dateofbirth();
  ::amapnr::Date* mutable_dateofbirth();
  void set_allocated_dateofbirth(::amapnr::Date* dateofbirth);
  private:
  const ::amapnr::Date& _internal_dateofbirth() const;
  ::amapnr::Date* _internal_mutable_dateofbirth();
  public:

  // @@protoc_insertion_point(class_scope:amapnr.Passenger)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr surname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
  ::amapnr::Date* dateofbirth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pnr_2eproto;
};
// -------------------------------------------------------------------

class PNR_Rloc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amapnr.PNR.Rloc) */ {
 public:
  PNR_Rloc();
  virtual ~PNR_Rloc();

  PNR_Rloc(const PNR_Rloc& from);
  PNR_Rloc(PNR_Rloc&& from) noexcept
    : PNR_Rloc() {
    *this = ::std::move(from);
  }

  inline PNR_Rloc& operator=(const PNR_Rloc& from) {
    CopyFrom(from);
    return *this;
  }
  inline PNR_Rloc& operator=(PNR_Rloc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PNR_Rloc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PNR_Rloc* internal_default_instance() {
    return reinterpret_cast<const PNR_Rloc*>(
               &_PNR_Rloc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PNR_Rloc& a, PNR_Rloc& b) {
    a.Swap(&b);
  }
  inline void Swap(PNR_Rloc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PNR_Rloc* New() const final {
    return CreateMaybeMessage<PNR_Rloc>(nullptr);
  }

  PNR_Rloc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PNR_Rloc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PNR_Rloc& from);
  void MergeFrom(const PNR_Rloc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PNR_Rloc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amapnr.PNR.Rloc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pnr_2eproto);
    return ::descriptor_table_pnr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRlocFieldNumber = 1,
  };
  // string rloc = 1;
  void clear_rloc();
  const std::string& rloc() const;
  void set_rloc(const std::string& value);
  void set_rloc(std::string&& value);
  void set_rloc(const char* value);
  void set_rloc(const char* value, size_t size);
  std::string* mutable_rloc();
  std::string* release_rloc();
  void set_allocated_rloc(std::string* rloc);
  private:
  const std::string& _internal_rloc() const;
  void _internal_set_rloc(const std::string& value);
  std::string* _internal_mutable_rloc();
  public:

  // @@protoc_insertion_point(class_scope:amapnr.PNR.Rloc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rloc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pnr_2eproto;
};
// -------------------------------------------------------------------

class PNR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:amapnr.PNR) */ {
 public:
  PNR();
  virtual ~PNR();

  PNR(const PNR& from);
  PNR(PNR&& from) noexcept
    : PNR() {
    *this = ::std::move(from);
  }

  inline PNR& operator=(const PNR& from) {
    CopyFrom(from);
    return *this;
  }
  inline PNR& operator=(PNR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PNR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PNR* internal_default_instance() {
    return reinterpret_cast<const PNR*>(
               &_PNR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PNR& a, PNR& b) {
    a.Swap(&b);
  }
  inline void Swap(PNR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PNR* New() const final {
    return CreateMaybeMessage<PNR>(nullptr);
  }

  PNR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PNR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PNR& from);
  void MergeFrom(const PNR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PNR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "amapnr.PNR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pnr_2eproto);
    return ::descriptor_table_pnr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PNR_Rloc Rloc;

  // accessors -------------------------------------------------------

  enum : int {
    kFlightNumFieldNumber = 2,
    kRlocFieldNumber = 1,
    kDepartureDateFieldNumber = 3,
    kArrivalDateFieldNumber = 4,
    kPaxFieldNumber = 5,
  };
  // string flightNum = 2;
  void clear_flightnum();
  const std::string& flightnum() const;
  void set_flightnum(const std::string& value);
  void set_flightnum(std::string&& value);
  void set_flightnum(const char* value);
  void set_flightnum(const char* value, size_t size);
  std::string* mutable_flightnum();
  std::string* release_flightnum();
  void set_allocated_flightnum(std::string* flightnum);
  private:
  const std::string& _internal_flightnum() const;
  void _internal_set_flightnum(const std::string& value);
  std::string* _internal_mutable_flightnum();
  public:

  // .amapnr.PNR.Rloc rloc = 1;
  bool has_rloc() const;
  private:
  bool _internal_has_rloc() const;
  public:
  void clear_rloc();
  const ::amapnr::PNR_Rloc& rloc() const;
  ::amapnr::PNR_Rloc* release_rloc();
  ::amapnr::PNR_Rloc* mutable_rloc();
  void set_allocated_rloc(::amapnr::PNR_Rloc* rloc);
  private:
  const ::amapnr::PNR_Rloc& _internal_rloc() const;
  ::amapnr::PNR_Rloc* _internal_mutable_rloc();
  public:

  // .amapnr.Date departureDate = 3;
  bool has_departuredate() const;
  private:
  bool _internal_has_departuredate() const;
  public:
  void clear_departuredate();
  const ::amapnr::Date& departuredate() const;
  ::amapnr::Date* release_departuredate();
  ::amapnr::Date* mutable_departuredate();
  void set_allocated_departuredate(::amapnr::Date* departuredate);
  private:
  const ::amapnr::Date& _internal_departuredate() const;
  ::amapnr::Date* _internal_mutable_departuredate();
  public:

  // .amapnr.Date arrivalDate = 4;
  bool has_arrivaldate() const;
  private:
  bool _internal_has_arrivaldate() const;
  public:
  void clear_arrivaldate();
  const ::amapnr::Date& arrivaldate() const;
  ::amapnr::Date* release_arrivaldate();
  ::amapnr::Date* mutable_arrivaldate();
  void set_allocated_arrivaldate(::amapnr::Date* arrivaldate);
  private:
  const ::amapnr::Date& _internal_arrivaldate() const;
  ::amapnr::Date* _internal_mutable_arrivaldate();
  public:

  // .amapnr.Passenger pax = 5;
  bool has_pax() const;
  private:
  bool _internal_has_pax() const;
  public:
  void clear_pax();
  const ::amapnr::Passenger& pax() const;
  ::amapnr::Passenger* release_pax();
  ::amapnr::Passenger* mutable_pax();
  void set_allocated_pax(::amapnr::Passenger* pax);
  private:
  const ::amapnr::Passenger& _internal_pax() const;
  ::amapnr::Passenger* _internal_mutable_pax();
  public:

  // @@protoc_insertion_point(class_scope:amapnr.PNR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flightnum_;
  ::amapnr::PNR_Rloc* rloc_;
  ::amapnr::Date* departuredate_;
  ::amapnr::Date* arrivaldate_;
  ::amapnr::Passenger* pax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pnr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Date

// int32 year = 1;
inline void Date::clear_year() {
  year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date::year() const {
  // @@protoc_insertion_point(field_get:amapnr.Date.year)
  return _internal_year();
}
inline void Date::_internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  year_ = value;
}
inline void Date::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:amapnr.Date.year)
}

// int32 month = 2;
inline void Date::clear_month() {
  month_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date::month() const {
  // @@protoc_insertion_point(field_get:amapnr.Date.month)
  return _internal_month();
}
inline void Date::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  month_ = value;
}
inline void Date::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:amapnr.Date.month)
}

// int32 day = 3;
inline void Date::clear_day() {
  day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date::day() const {
  // @@protoc_insertion_point(field_get:amapnr.Date.day)
  return _internal_day();
}
inline void Date::_internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_ = value;
}
inline void Date::set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:amapnr.Date.day)
}

// -------------------------------------------------------------------

// Passenger

// string surname = 1;
inline void Passenger::clear_surname() {
  surname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Passenger::surname() const {
  // @@protoc_insertion_point(field_get:amapnr.Passenger.surname)
  return _internal_surname();
}
inline void Passenger::set_surname(const std::string& value) {
  _internal_set_surname(value);
  // @@protoc_insertion_point(field_set:amapnr.Passenger.surname)
}
inline std::string* Passenger::mutable_surname() {
  // @@protoc_insertion_point(field_mutable:amapnr.Passenger.surname)
  return _internal_mutable_surname();
}
inline const std::string& Passenger::_internal_surname() const {
  return surname_.GetNoArena();
}
inline void Passenger::_internal_set_surname(const std::string& value) {
  
  surname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Passenger::set_surname(std::string&& value) {
  
  surname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amapnr.Passenger.surname)
}
inline void Passenger::set_surname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  surname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amapnr.Passenger.surname)
}
inline void Passenger::set_surname(const char* value, size_t size) {
  
  surname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amapnr.Passenger.surname)
}
inline std::string* Passenger::_internal_mutable_surname() {
  
  return surname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Passenger::release_surname() {
  // @@protoc_insertion_point(field_release:amapnr.Passenger.surname)
  
  return surname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Passenger::set_allocated_surname(std::string* surname) {
  if (surname != nullptr) {
    
  } else {
    
  }
  surname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), surname);
  // @@protoc_insertion_point(field_set_allocated:amapnr.Passenger.surname)
}

// string firstname = 2;
inline void Passenger::clear_firstname() {
  firstname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Passenger::firstname() const {
  // @@protoc_insertion_point(field_get:amapnr.Passenger.firstname)
  return _internal_firstname();
}
inline void Passenger::set_firstname(const std::string& value) {
  _internal_set_firstname(value);
  // @@protoc_insertion_point(field_set:amapnr.Passenger.firstname)
}
inline std::string* Passenger::mutable_firstname() {
  // @@protoc_insertion_point(field_mutable:amapnr.Passenger.firstname)
  return _internal_mutable_firstname();
}
inline const std::string& Passenger::_internal_firstname() const {
  return firstname_.GetNoArena();
}
inline void Passenger::_internal_set_firstname(const std::string& value) {
  
  firstname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Passenger::set_firstname(std::string&& value) {
  
  firstname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amapnr.Passenger.firstname)
}
inline void Passenger::set_firstname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firstname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amapnr.Passenger.firstname)
}
inline void Passenger::set_firstname(const char* value, size_t size) {
  
  firstname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amapnr.Passenger.firstname)
}
inline std::string* Passenger::_internal_mutable_firstname() {
  
  return firstname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Passenger::release_firstname() {
  // @@protoc_insertion_point(field_release:amapnr.Passenger.firstname)
  
  return firstname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Passenger::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  firstname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firstname);
  // @@protoc_insertion_point(field_set_allocated:amapnr.Passenger.firstname)
}

// .amapnr.Date dateofbirth = 3;
inline bool Passenger::_internal_has_dateofbirth() const {
  return this != internal_default_instance() && dateofbirth_ != nullptr;
}
inline bool Passenger::has_dateofbirth() const {
  return _internal_has_dateofbirth();
}
inline void Passenger::clear_dateofbirth() {
  if (GetArenaNoVirtual() == nullptr && dateofbirth_ != nullptr) {
    delete dateofbirth_;
  }
  dateofbirth_ = nullptr;
}
inline const ::amapnr::Date& Passenger::_internal_dateofbirth() const {
  const ::amapnr::Date* p = dateofbirth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amapnr::Date*>(
      &::amapnr::_Date_default_instance_);
}
inline const ::amapnr::Date& Passenger::dateofbirth() const {
  // @@protoc_insertion_point(field_get:amapnr.Passenger.dateofbirth)
  return _internal_dateofbirth();
}
inline ::amapnr::Date* Passenger::release_dateofbirth() {
  // @@protoc_insertion_point(field_release:amapnr.Passenger.dateofbirth)
  
  ::amapnr::Date* temp = dateofbirth_;
  dateofbirth_ = nullptr;
  return temp;
}
inline ::amapnr::Date* Passenger::_internal_mutable_dateofbirth() {
  
  if (dateofbirth_ == nullptr) {
    auto* p = CreateMaybeMessage<::amapnr::Date>(GetArenaNoVirtual());
    dateofbirth_ = p;
  }
  return dateofbirth_;
}
inline ::amapnr::Date* Passenger::mutable_dateofbirth() {
  // @@protoc_insertion_point(field_mutable:amapnr.Passenger.dateofbirth)
  return _internal_mutable_dateofbirth();
}
inline void Passenger::set_allocated_dateofbirth(::amapnr::Date* dateofbirth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dateofbirth_;
  }
  if (dateofbirth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dateofbirth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dateofbirth, submessage_arena);
    }
    
  } else {
    
  }
  dateofbirth_ = dateofbirth;
  // @@protoc_insertion_point(field_set_allocated:amapnr.Passenger.dateofbirth)
}

// -------------------------------------------------------------------

// PNR_Rloc

// string rloc = 1;
inline void PNR_Rloc::clear_rloc() {
  rloc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PNR_Rloc::rloc() const {
  // @@protoc_insertion_point(field_get:amapnr.PNR.Rloc.rloc)
  return _internal_rloc();
}
inline void PNR_Rloc::set_rloc(const std::string& value) {
  _internal_set_rloc(value);
  // @@protoc_insertion_point(field_set:amapnr.PNR.Rloc.rloc)
}
inline std::string* PNR_Rloc::mutable_rloc() {
  // @@protoc_insertion_point(field_mutable:amapnr.PNR.Rloc.rloc)
  return _internal_mutable_rloc();
}
inline const std::string& PNR_Rloc::_internal_rloc() const {
  return rloc_.GetNoArena();
}
inline void PNR_Rloc::_internal_set_rloc(const std::string& value) {
  
  rloc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PNR_Rloc::set_rloc(std::string&& value) {
  
  rloc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amapnr.PNR.Rloc.rloc)
}
inline void PNR_Rloc::set_rloc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rloc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amapnr.PNR.Rloc.rloc)
}
inline void PNR_Rloc::set_rloc(const char* value, size_t size) {
  
  rloc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amapnr.PNR.Rloc.rloc)
}
inline std::string* PNR_Rloc::_internal_mutable_rloc() {
  
  return rloc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PNR_Rloc::release_rloc() {
  // @@protoc_insertion_point(field_release:amapnr.PNR.Rloc.rloc)
  
  return rloc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PNR_Rloc::set_allocated_rloc(std::string* rloc) {
  if (rloc != nullptr) {
    
  } else {
    
  }
  rloc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rloc);
  // @@protoc_insertion_point(field_set_allocated:amapnr.PNR.Rloc.rloc)
}

// -------------------------------------------------------------------

// PNR

// .amapnr.PNR.Rloc rloc = 1;
inline bool PNR::_internal_has_rloc() const {
  return this != internal_default_instance() && rloc_ != nullptr;
}
inline bool PNR::has_rloc() const {
  return _internal_has_rloc();
}
inline void PNR::clear_rloc() {
  if (GetArenaNoVirtual() == nullptr && rloc_ != nullptr) {
    delete rloc_;
  }
  rloc_ = nullptr;
}
inline const ::amapnr::PNR_Rloc& PNR::_internal_rloc() const {
  const ::amapnr::PNR_Rloc* p = rloc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amapnr::PNR_Rloc*>(
      &::amapnr::_PNR_Rloc_default_instance_);
}
inline const ::amapnr::PNR_Rloc& PNR::rloc() const {
  // @@protoc_insertion_point(field_get:amapnr.PNR.rloc)
  return _internal_rloc();
}
inline ::amapnr::PNR_Rloc* PNR::release_rloc() {
  // @@protoc_insertion_point(field_release:amapnr.PNR.rloc)
  
  ::amapnr::PNR_Rloc* temp = rloc_;
  rloc_ = nullptr;
  return temp;
}
inline ::amapnr::PNR_Rloc* PNR::_internal_mutable_rloc() {
  
  if (rloc_ == nullptr) {
    auto* p = CreateMaybeMessage<::amapnr::PNR_Rloc>(GetArenaNoVirtual());
    rloc_ = p;
  }
  return rloc_;
}
inline ::amapnr::PNR_Rloc* PNR::mutable_rloc() {
  // @@protoc_insertion_point(field_mutable:amapnr.PNR.rloc)
  return _internal_mutable_rloc();
}
inline void PNR::set_allocated_rloc(::amapnr::PNR_Rloc* rloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rloc_;
  }
  if (rloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rloc, submessage_arena);
    }
    
  } else {
    
  }
  rloc_ = rloc;
  // @@protoc_insertion_point(field_set_allocated:amapnr.PNR.rloc)
}

// string flightNum = 2;
inline void PNR::clear_flightnum() {
  flightnum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PNR::flightnum() const {
  // @@protoc_insertion_point(field_get:amapnr.PNR.flightNum)
  return _internal_flightnum();
}
inline void PNR::set_flightnum(const std::string& value) {
  _internal_set_flightnum(value);
  // @@protoc_insertion_point(field_set:amapnr.PNR.flightNum)
}
inline std::string* PNR::mutable_flightnum() {
  // @@protoc_insertion_point(field_mutable:amapnr.PNR.flightNum)
  return _internal_mutable_flightnum();
}
inline const std::string& PNR::_internal_flightnum() const {
  return flightnum_.GetNoArena();
}
inline void PNR::_internal_set_flightnum(const std::string& value) {
  
  flightnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PNR::set_flightnum(std::string&& value) {
  
  flightnum_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:amapnr.PNR.flightNum)
}
inline void PNR::set_flightnum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flightnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:amapnr.PNR.flightNum)
}
inline void PNR::set_flightnum(const char* value, size_t size) {
  
  flightnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:amapnr.PNR.flightNum)
}
inline std::string* PNR::_internal_mutable_flightnum() {
  
  return flightnum_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PNR::release_flightnum() {
  // @@protoc_insertion_point(field_release:amapnr.PNR.flightNum)
  
  return flightnum_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PNR::set_allocated_flightnum(std::string* flightnum) {
  if (flightnum != nullptr) {
    
  } else {
    
  }
  flightnum_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flightnum);
  // @@protoc_insertion_point(field_set_allocated:amapnr.PNR.flightNum)
}

// .amapnr.Date departureDate = 3;
inline bool PNR::_internal_has_departuredate() const {
  return this != internal_default_instance() && departuredate_ != nullptr;
}
inline bool PNR::has_departuredate() const {
  return _internal_has_departuredate();
}
inline void PNR::clear_departuredate() {
  if (GetArenaNoVirtual() == nullptr && departuredate_ != nullptr) {
    delete departuredate_;
  }
  departuredate_ = nullptr;
}
inline const ::amapnr::Date& PNR::_internal_departuredate() const {
  const ::amapnr::Date* p = departuredate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amapnr::Date*>(
      &::amapnr::_Date_default_instance_);
}
inline const ::amapnr::Date& PNR::departuredate() const {
  // @@protoc_insertion_point(field_get:amapnr.PNR.departureDate)
  return _internal_departuredate();
}
inline ::amapnr::Date* PNR::release_departuredate() {
  // @@protoc_insertion_point(field_release:amapnr.PNR.departureDate)
  
  ::amapnr::Date* temp = departuredate_;
  departuredate_ = nullptr;
  return temp;
}
inline ::amapnr::Date* PNR::_internal_mutable_departuredate() {
  
  if (departuredate_ == nullptr) {
    auto* p = CreateMaybeMessage<::amapnr::Date>(GetArenaNoVirtual());
    departuredate_ = p;
  }
  return departuredate_;
}
inline ::amapnr::Date* PNR::mutable_departuredate() {
  // @@protoc_insertion_point(field_mutable:amapnr.PNR.departureDate)
  return _internal_mutable_departuredate();
}
inline void PNR::set_allocated_departuredate(::amapnr::Date* departuredate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete departuredate_;
  }
  if (departuredate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      departuredate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, departuredate, submessage_arena);
    }
    
  } else {
    
  }
  departuredate_ = departuredate;
  // @@protoc_insertion_point(field_set_allocated:amapnr.PNR.departureDate)
}

// .amapnr.Date arrivalDate = 4;
inline bool PNR::_internal_has_arrivaldate() const {
  return this != internal_default_instance() && arrivaldate_ != nullptr;
}
inline bool PNR::has_arrivaldate() const {
  return _internal_has_arrivaldate();
}
inline void PNR::clear_arrivaldate() {
  if (GetArenaNoVirtual() == nullptr && arrivaldate_ != nullptr) {
    delete arrivaldate_;
  }
  arrivaldate_ = nullptr;
}
inline const ::amapnr::Date& PNR::_internal_arrivaldate() const {
  const ::amapnr::Date* p = arrivaldate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amapnr::Date*>(
      &::amapnr::_Date_default_instance_);
}
inline const ::amapnr::Date& PNR::arrivaldate() const {
  // @@protoc_insertion_point(field_get:amapnr.PNR.arrivalDate)
  return _internal_arrivaldate();
}
inline ::amapnr::Date* PNR::release_arrivaldate() {
  // @@protoc_insertion_point(field_release:amapnr.PNR.arrivalDate)
  
  ::amapnr::Date* temp = arrivaldate_;
  arrivaldate_ = nullptr;
  return temp;
}
inline ::amapnr::Date* PNR::_internal_mutable_arrivaldate() {
  
  if (arrivaldate_ == nullptr) {
    auto* p = CreateMaybeMessage<::amapnr::Date>(GetArenaNoVirtual());
    arrivaldate_ = p;
  }
  return arrivaldate_;
}
inline ::amapnr::Date* PNR::mutable_arrivaldate() {
  // @@protoc_insertion_point(field_mutable:amapnr.PNR.arrivalDate)
  return _internal_mutable_arrivaldate();
}
inline void PNR::set_allocated_arrivaldate(::amapnr::Date* arrivaldate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete arrivaldate_;
  }
  if (arrivaldate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arrivaldate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrivaldate, submessage_arena);
    }
    
  } else {
    
  }
  arrivaldate_ = arrivaldate;
  // @@protoc_insertion_point(field_set_allocated:amapnr.PNR.arrivalDate)
}

// .amapnr.Passenger pax = 5;
inline bool PNR::_internal_has_pax() const {
  return this != internal_default_instance() && pax_ != nullptr;
}
inline bool PNR::has_pax() const {
  return _internal_has_pax();
}
inline void PNR::clear_pax() {
  if (GetArenaNoVirtual() == nullptr && pax_ != nullptr) {
    delete pax_;
  }
  pax_ = nullptr;
}
inline const ::amapnr::Passenger& PNR::_internal_pax() const {
  const ::amapnr::Passenger* p = pax_;
  return p != nullptr ? *p : *reinterpret_cast<const ::amapnr::Passenger*>(
      &::amapnr::_Passenger_default_instance_);
}
inline const ::amapnr::Passenger& PNR::pax() const {
  // @@protoc_insertion_point(field_get:amapnr.PNR.pax)
  return _internal_pax();
}
inline ::amapnr::Passenger* PNR::release_pax() {
  // @@protoc_insertion_point(field_release:amapnr.PNR.pax)
  
  ::amapnr::Passenger* temp = pax_;
  pax_ = nullptr;
  return temp;
}
inline ::amapnr::Passenger* PNR::_internal_mutable_pax() {
  
  if (pax_ == nullptr) {
    auto* p = CreateMaybeMessage<::amapnr::Passenger>(GetArenaNoVirtual());
    pax_ = p;
  }
  return pax_;
}
inline ::amapnr::Passenger* PNR::mutable_pax() {
  // @@protoc_insertion_point(field_mutable:amapnr.PNR.pax)
  return _internal_mutable_pax();
}
inline void PNR::set_allocated_pax(::amapnr::Passenger* pax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pax_;
  }
  if (pax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pax, submessage_arena);
    }
    
  } else {
    
  }
  pax_ = pax;
  // @@protoc_insertion_point(field_set_allocated:amapnr.PNR.pax)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace amapnr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pnr_2eproto
